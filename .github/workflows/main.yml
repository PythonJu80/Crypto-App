name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans

env:
  NODE_VERSION: '18.x'
  AWS_REGION: 'us-west-2'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run SAST scan
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run dependency audit
        run: npm audit

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm test
        env:
          NODE_ENV: test
          BINANCE_USE_TESTNET: true

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          BINANCE_USE_TESTNET: true

  build-and-analyze:
    needs: [security-scan, lint-and-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Analyze bundle size
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: dist/stats.json

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://staging.your-app.com
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Validate build
        run: node scripts/validate-build.js
        env:
          NODE_ENV: production
          BINANCE_USE_TESTNET: true
          COINGECKO_API_KEY: ${{ secrets.COINGECKO_API_KEY }}

  deploy-staging:
    needs: build-and-analyze
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push Docker image
        run: |
          docker build -t crypto-app:${{ github.sha }} \
            --build-arg NODE_ENV=staging \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            .
          docker tag crypto-app:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/crypto-app:staging
          docker push ${{ secrets.ECR_REGISTRY }}/crypto-app:staging

      - name: Deploy to ECS Staging
        run: |
          aws ecs update-service \
            --cluster crypto-app-staging \
            --service crypto-app-service \
            --force-new-deployment \
            --task-definition crypto-app-staging:${{ github.sha }}

      - name: Run smoke tests
        run: |
          npm run test:smoke
          npm run test:e2e
        env:
          APP_URL: https://staging.your-app.com

  deploy-production:
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push Docker image
        run: |
          docker build -t crypto-app:${{ github.sha }} \
            --build-arg NODE_ENV=production \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            .
          docker tag crypto-app:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/crypto-app:production
          docker tag crypto-app:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/crypto-app:${{ github.sha }}
          docker push ${{ secrets.ECR_REGISTRY }}/crypto-app:production
          docker push ${{ secrets.ECR_REGISTRY }}/crypto-app:${{ github.sha }}

      - name: Deploy to ECS Production
        run: |
          aws ecs update-service \
            --cluster crypto-app-production \
            --service crypto-app-service \
            --force-new-deployment \
            --task-definition crypto-app-production:${{ github.sha }}

      - name: Run post-deployment tests
        run: |
          npm run test:smoke
          npm run test:e2e
        env:
          APP_URL: https://app.your-app.com

  notify:
    needs: [deploy-production]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
